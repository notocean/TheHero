//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/MainCharacter/MainInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputAction"",
    ""maps"": [
        {
            ""name"": ""MainCharacter"",
            ""id"": ""b87b6ab1-94a4-4344-9259-ffbaf5da9b6d"",
            ""actions"": [
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""Button"",
                    ""id"": ""953145e5-bebd-4a72-b37d-ff1de117b254"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyMovement"",
                    ""type"": ""Value"",
                    ""id"": ""5eacc717-6a53-47ef-a41d-59cd9d411bee"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6b5469b9-94b8-494b-baa3-852455257fed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillQ"",
                    ""type"": ""Button"",
                    ""id"": ""6c572aab-5389-4b03-aed1-8b5ee576505d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkillE"",
                    ""type"": ""Button"",
                    ""id"": ""72047cbe-0b78-461b-a82d-8c3280f69230"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8a55444-b77f-4642-b030-ce5053acc597"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ArrowKey"",
                    ""id"": ""2775f3db-8226-40e3-ba3f-3a76296456ef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bc41585c-04ad-4c91-9a46-320475e96145"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""15de2551-95a9-4040-bee0-d5820a6e5ec6"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4ad47061-9a7a-4ab7-8cd3-7d38e6f8d002"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c39c8d5a-214e-44a6-ac5e-805a8f0ea99c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b0b821e6-5aa7-489a-ab86-5503cafb34e3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""587f6868-19d4-4b41-ae4d-368c5a116505"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d75f37a-7b3c-482b-81d4-9441c4be4357"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkillE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainCharacter
        m_MainCharacter = asset.FindActionMap("MainCharacter", throwIfNotFound: true);
        m_MainCharacter_MouseMovement = m_MainCharacter.FindAction("MouseMovement", throwIfNotFound: true);
        m_MainCharacter_KeyMovement = m_MainCharacter.FindAction("KeyMovement", throwIfNotFound: true);
        m_MainCharacter_Attack = m_MainCharacter.FindAction("Attack", throwIfNotFound: true);
        m_MainCharacter_SkillQ = m_MainCharacter.FindAction("SkillQ", throwIfNotFound: true);
        m_MainCharacter_SkillE = m_MainCharacter.FindAction("SkillE", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainCharacter
    private readonly InputActionMap m_MainCharacter;
    private List<IMainCharacterActions> m_MainCharacterActionsCallbackInterfaces = new List<IMainCharacterActions>();
    private readonly InputAction m_MainCharacter_MouseMovement;
    private readonly InputAction m_MainCharacter_KeyMovement;
    private readonly InputAction m_MainCharacter_Attack;
    private readonly InputAction m_MainCharacter_SkillQ;
    private readonly InputAction m_MainCharacter_SkillE;
    public struct MainCharacterActions
    {
        private @MainInputAction m_Wrapper;
        public MainCharacterActions(@MainInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMovement => m_Wrapper.m_MainCharacter_MouseMovement;
        public InputAction @KeyMovement => m_Wrapper.m_MainCharacter_KeyMovement;
        public InputAction @Attack => m_Wrapper.m_MainCharacter_Attack;
        public InputAction @SkillQ => m_Wrapper.m_MainCharacter_SkillQ;
        public InputAction @SkillE => m_Wrapper.m_MainCharacter_SkillE;
        public InputActionMap Get() { return m_Wrapper.m_MainCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainCharacterActions set) { return set.Get(); }
        public void AddCallbacks(IMainCharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_MainCharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainCharacterActionsCallbackInterfaces.Add(instance);
            @MouseMovement.started += instance.OnMouseMovement;
            @MouseMovement.performed += instance.OnMouseMovement;
            @MouseMovement.canceled += instance.OnMouseMovement;
            @KeyMovement.started += instance.OnKeyMovement;
            @KeyMovement.performed += instance.OnKeyMovement;
            @KeyMovement.canceled += instance.OnKeyMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SkillQ.started += instance.OnSkillQ;
            @SkillQ.performed += instance.OnSkillQ;
            @SkillQ.canceled += instance.OnSkillQ;
            @SkillE.started += instance.OnSkillE;
            @SkillE.performed += instance.OnSkillE;
            @SkillE.canceled += instance.OnSkillE;
        }

        private void UnregisterCallbacks(IMainCharacterActions instance)
        {
            @MouseMovement.started -= instance.OnMouseMovement;
            @MouseMovement.performed -= instance.OnMouseMovement;
            @MouseMovement.canceled -= instance.OnMouseMovement;
            @KeyMovement.started -= instance.OnKeyMovement;
            @KeyMovement.performed -= instance.OnKeyMovement;
            @KeyMovement.canceled -= instance.OnKeyMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SkillQ.started -= instance.OnSkillQ;
            @SkillQ.performed -= instance.OnSkillQ;
            @SkillQ.canceled -= instance.OnSkillQ;
            @SkillE.started -= instance.OnSkillE;
            @SkillE.performed -= instance.OnSkillE;
            @SkillE.canceled -= instance.OnSkillE;
        }

        public void RemoveCallbacks(IMainCharacterActions instance)
        {
            if (m_Wrapper.m_MainCharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainCharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_MainCharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainCharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainCharacterActions @MainCharacter => new MainCharacterActions(this);
    public interface IMainCharacterActions
    {
        void OnMouseMovement(InputAction.CallbackContext context);
        void OnKeyMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSkillQ(InputAction.CallbackContext context);
        void OnSkillE(InputAction.CallbackContext context);
    }
}
